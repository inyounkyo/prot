package in.moduler.practice.ehcache.controller;

import in.moduler.practice.ehcache.service.SampleService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.Cache;
import org.springframework.cache.ehcache.EhCacheCacheManager;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

/**
 *
 * @author HK
 */
@RestController
public class SampleController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private SampleService service;

    @Autowired
    private EhCacheCacheManager cacheManager;

    /**
     * Get Non-Cached Data From ServiceLayer Generated
     *
     * @param param
     * @return
     */
    @RequestMapping(
            value = "getNormal1",
            method = RequestMethod.GET,
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE
    )
    public Map getNormalNonCache(@RequestParam(value = "param", required = true) String param) {

        return service.getNormalDataNonCaching(param);
    }



    /**
     * Get Cached Data From ServiceLayer Generated
     *
     * @param param
     * @return
     */
    @RequestMapping(
            value = "getNormal2",
            method = RequestMethod.GET,
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE
    )
    public Map getNormalCache(@RequestParam(value = "param", required = true) String param) {
        Map<String, Object> c = service.getNormalDataCaching(param);
        //logger.info("Ctrll Cach:::", c);
        //logger.debug("Ctrll Cach de:::", c);
        //System.out.println("systepint:: "+c);

        Cache cache =  cacheManager.getCache("normal");
        Cache.ValueWrapper element =  cache.get("a12");
        Map<String, Object> cMap =  (Map<String, Object>)element.get();
        System.out.println("longlonglonglong:: "+ cMap.get("long"));

        return c;
    }

    /**
     * Get Cached Data From ServiceLayer Generated By Multiple Parameter
     *
     * @param param1
     * @param param2
     * @param param3
     * @return
     */
    @RequestMapping(
            value = "getNormal3",
            method = RequestMethod.GET,
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE
    )
    public Map getNormalCacheMultipleParam(
            @RequestParam(value = "param1", required = true) String param1,
            @RequestParam(value = "param2", required = true) String param2,
            @RequestParam(value = "param3", required = false) String param3
    ) {

        return service.getNormalDataDefaultKeyStrategy(param1, param2, param3);
    }
    
    
    /**
     * Get Non-Cached Data From ServiceLayer Generated And Erase Cached Data By Key
     *
     * @param param
     * @return
     */
    @RequestMapping(
            value = "getNormal4",
            method = RequestMethod.GET,
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE
    )
    public Map getNormalNonCacheErase(
            @RequestParam(value = "param", required = true) String param
    ) {

        return service.getNormalDataEraseCache(param);
    }
    

    /**
     * Get Non-Cached Data From Database through Myabatis Mapper
     *
     * @param param
     * @return
     */
    @RequestMapping(
            value = "getMybatis1",
            method = RequestMethod.GET,
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE
    )
    public in.moduler.practice.ehcache.model.Character getMybatisNonCache(@RequestParam(value = "param", required = true) Long param) {

        return service.getMybatisDataNonCaching(param);
    }

    /**
     * Get Cached Data From Database through Myabatis Mapper
     *
     * @param param
     * @return
     */
    @RequestMapping(
            value = "getMybatis2",
            method = RequestMethod.GET,
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE
    )
    public in.moduler.practice.ehcache.model.Character getMybatisCache(@RequestParam(value = "param", required = true) Long param) {

        return service.getMybatisDataCaching(param);
    }

}
